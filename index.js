import dotenv from "dotenv";
dotenv.config();

import express from "express";
import axios from "axios";
import cors from "cors";

const app = express();

const allowedOrigins = [
  "https://chef-claude-pi-nine.vercel.app",
  "http://localhost:5173", 
];

app.use(
  cors({
    origin: allowedOrigins,
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: ["Content-type", "Authorization"],
    credentials: true,
  })
);

app.use(express.json());

app.get("/", (req, res) => {
res.send("Chef Claude API online 🍳");
});

const PORT = process.env.PORT || 3001;

app.post("/api/recipe", async (req, res) => {
  const { ingredients } = req.body;

  if (!ingredients || !Array.isArray(ingredients)) {
    return res.status(400).json({ error: "Invalid ingredients format" });
  }

  try {
    console.log("🧾 Request received with ingredients:", ingredients);

    const response = await axios.post(
      "https://router.huggingface.co/hf-inference/models/mistralai/Mistral-7B-Instruct-v0.3",
      {
        inputs: `Make a recipe with: ${ingredients.join(", ")}`,
        parameters: {
          max_new_tokens: 1024,
        },
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.HF_ACCESS_TOKEN}`,
        },
        timeout: 100000,
      }
    );
    const recipe = response.data?.[0]?.generated_text?.trim();

if (!recipe) {
  throw new Error("No recipe generated by the model.");
}

console.log("✅ Recipe generated successfully.");
res.json({ recipe });


} catch (error) {
console.error("❌ Error generating recipe:", error?.response?.data || error.message);
res.status(500).json({
error: "Error generating recipe",
details: error?.response?.data || error.message,
});
}
});

app.listen(PORT, () => {
  console.log(`Server runnig on port: ${PORT}`);
});
